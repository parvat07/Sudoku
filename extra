import random
import sys
import time

class Sudoku:
    def __init__(self):
        self.board = [[0] * 9 for _ in range(9)]
        self.selected = None
        self.timer = 480
        self.chances = 3
        self.difficulty = "easy"

    def generate_board(self):
        for i in range(9):
            for j in range(9):
                self.board[i][j] = random.randint(1, 9)

        empty_cells = {"easy": 40, "medium": 50, "hard": 60}
        empty_cells_count = empty_cells[self.difficulty]

        for _ in range(empty_cells_count):
            row = random.randint(0, 8)
            col = random.randint(0, 8)
            self.board[row][col] = 0

        self.reset_timer()
        self.chances = 3

    def reset_timer(self):
        self.timer = 480

    def display_board(self):
        for row in self.board:
            print(" ".join(map(str, row)))

    def set_difficulty(self, difficulty):
        self.difficulty = difficulty
        self.generate_board()

    def update_timer(self):
        time.sleep(1)
        self.timer -= 1
        if self.timer <= 0:
            print("Game Over: Time's up!")
            sys.exit()

    def input_number(self, row, col, number):
        if self.board[row][col] == 0:
            if self.is_valid_move(row, col, number):
                self.board[row][col] = number
            else:
                self.chances -= 1
                if self.chances == 0:
                    print("No more chances left. Generating new game board...")
                    self.generate_board()
        else:
            self.chances -= 1

    def is_valid_move(self, row, col, number):
        return self.is_valid_row(row, number) and \
               self.is_valid_column(col, number) and \
               self.is_valid_subgrid(row, col, number)

    def is_valid_row(self, row, number):
        return number not in self.board[row]

    def is_valid_column(self, col, number):
        column = [self.board[i][col] for i in range(9)]
        return number not in column

    def is_valid_subgrid(self, row, col, number):
        start_row, start_col = (row // 3) * 3, (col // 3) * 3
        for i in range(3):
            for j in range(3):
                if self.board[start_row + i][start_col + j] == number:
                    return False
        return True

def main():
    sudoku = Sudoku()
    sudoku.generate_board()

    while True:
        sudoku.display_board()
        print(f"Time: {sudoku.timer // 60:02}:{sudoku.timer % 60:02}")
        print(f"Chances left: {sudoku.chances}/3")

        row = int(input("Enter row (1-9): ")) - 1
        col = int(input("Enter column (1-9): ")) - 1
        number = int(input("Enter number (1-9): "))

        sudoku.input_number(row, col, number)
        sudoku.update_timer()

if __name__ == "__main__":
    main()

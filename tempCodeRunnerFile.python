class SudokuSolver:
    def __init__(self, board):
        self.board = board
        self.stack = []

    def is_valid(self, row, col, num):
        # Check if the number is already in the row
        if num in self.board[row]:
            return False

        # Check if the number is already in the column
        if num in [self.board[i][col] for i in range(9)]:
            return False

        # Check if the number is already in the 3x3 grid
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(3):
            for j in range(3):
                if self.board[start_row + i][start_col + j] == num:
                    return False
        return True

    def solve(self):
        for row in range(9):
            for col in range(9):
                if self.board[row][col] == 0:
                    for num in range(1, 10):
                        if self.is_valid(row, col, num):
                            self.board[row][col] = num
                            self.stack.append((row, col, num))
                            if self.solve():
                                return True
                            self.board[row][col] = 0
                            self.stack.pop()
                    return False
        return True

    def undo(self):
        if self.stack:
            row, col, _ = self.stack.pop()
            self.board[row][col] = 0

    def redo(self):
        if self.stack:
            row, col, num = self.stack[-1]
            self.board[row][col] = num
            self.stack.append(self.stack.pop())


def print_board(board):
    for row in board:
        print(" ".join(map(str, row)))


def main():
    # Example Sudoku board (0 represents empty cells)
    board = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    print("Sudoku Board:")
    print_board(board)

    solver = SudokuSolver(board)
    if solver.solve():
        print("\nSudoku Solution:")
        print_board(board)
    else:
        print("\nNo solution exists for the given Sudoku board.")

    # Test undo and redo functionality
    print("\nPerforming Undo:")
    solver.undo()
    print_board(board)

    print("\nPerforming Redo:")
    solver.redo()
    print_board(board)


if __name__ == "__main__":
    main()
